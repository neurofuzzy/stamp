var _canvas2svg = require("canvas2svg");
var _srcLibDraw = require("../src/lib/draw");
var _srcGeomCore = require("../src/geom/core");
var _srcLibClipperHelpers = require("../src/lib/clipper-helpers");
var _srcLibSequence = require("../src/lib/sequence");
var _srcLibStamp = require("../src/lib/stamp");
require("../src/style.css");
var _niceColorPalettes = require("nice-color-palettes");
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _niceColorPalettesDefault = _parcelHelpers.interopDefault(_niceColorPalettes);
var _srcLibStampLayout = require("../src/lib/stamp-layout");
var _srcGeomHelpers = require("../src/geom/helpers");
var _srcGeomUtil = require("../src/geom/util");
var _geomShapes = require("./geom/shapes");
document.querySelector("#app").innerHTML = `
  <div>
    <canvas id="canvas" width="768" height="768" style="background-color: black;"></canvas>
  </div>
`;
const canvas = document.getElementById("canvas");
const ratio = 2;
canvas.width = 850 * ratio;
canvas.height = 2200 * ratio;
canvas.style.width = "850px";
canvas.style.height = "2200px";
const ctx = canvas.getContext("2d");
ctx.scale(ratio, ratio);
const w = canvas.width / ratio;
const h = canvas.height / ratio;
ctx.fillStyle = "white";
_srcLibSequence.Sequence.seed = 1;
// 2,7,24,29,32,39,69,78,83,94,96
const palette = _niceColorPalettesDefault.default[83];
const colorSeq = `random ${palette.join(",").split("#").join("0x")} AS COLOR`;
_srcLibSequence.Sequence.fromStatement(colorSeq, 125);
_srcLibSequence.Sequence.seed = 2;
_srcLibSequence.Sequence.seed = 500;
_srcLibSequence.Sequence.seed = 503;
_srcLibSequence.Sequence.seed = 506;
_srcLibSequence.Sequence.seed = 518;
_srcLibSequence.Sequence.seed = 18;
_srcLibSequence.Sequence.seed = 17;
_srcLibSequence.Sequence.seed = 199;
_srcLibSequence.Sequence.seed = 198;
_srcLibSequence.Sequence.seed = 197;
_srcLibSequence.Sequence.seed = 193;
_srcLibSequence.Sequence.seed = 316;
// Sequence.fromStatement("shuffle -60,-60,-60,-60,-60,-60,-60,-60,60,60,60,60,60,60,60,60,60,60 AS RANGLE");
// Sequence.fromStatement("shuffle -72,-72,-144,72,-72 AS RANGLE");
// Sequence.fromStatement("shuffle -120,-120,60,60,-60,-60,0 AS RANGLE");
// Sequence.fromStatement("shuffle -60,-60,60,0,180,0,-60,-60,60,0,180,0 AS RANGLE");
// Sequence.fromStatement("shuffle -72,-72,-72,-72,-72,72,72,180,0,0 AS RANGLE");
// Sequence.fromStatement("shuffle -90,-90,90,-90,0,-90,-90,90,0,0 AS RANGLE");
// Sequence.fromStatement("shuffle -72,-72,72,72,72,72,72 AS RANGLE");
// Sequence.fromStatement("shuffle -144,-144,-144,-144,-144,-144,-144,-144,144,144,144,144,144,144,144,144,144,144,-72,-72,-72,72 AS RANGLE");
_srcLibSequence.Sequence.fromStatement("shuffle -60,-60,-60,-60,-60,60,60,60,60,60,60,60,60,60,60,120 AS RANGLE");
// Sequence.fromStatement("shuffle -60,-60,-60,60,60,60,60,60,120 AS RANGLE");
_srcLibSequence.Sequence.fromStatement("shuffle 0,1,0,1,0,1 AS BSKIP");
_srcLibSequence.Sequence.fromStatement("repeat 10,10 AS BERRY");
const len = 30;
const weight = 2;
const draw = ctx => {
  ctx.clearRect(0, 0, w, h);
  const lattice = new _srcLibStamp.Stamp(new _srcGeomCore.Ray(w / 2, h / 2, 0)).noBoolean().defaultStyle({
    strokeThickness: 0,
    fillColor: "cyan"
  }).forward(len).circle({
    radius: 2,
    divisions: 3,
    skip: 1
  }).rotate("RANGLE()").repeatLast(3, 240);
  // const seeds = Sequence.fromStatement("repeat 120347,18648,9847,72398,12030,1923", 12);
  // const seeds = Sequence.fromStatement("repeat 891274,23305972,12049842978,398085,851295,149899", 12);
  // const seeds = Sequence.fromStatement("shuffle 7,12,26,35,66,113,108,93,91,", 12);
  // const seeds = Sequence.fromStatement("repeat 45654245,6212575556,45618461976,86294281448,621286238642389462", 12);
  const seeds = _srcLibSequence.Sequence.fromStatement("shuffle 2,3,4,10, 11,13,16,19, 22,23,110,31, 34,37,87,44, 45,47,118,60, 62,63,65,71", 17);
  // const seeds = Sequence.fromStatement("shuffle 2,3,4,102, 11,13,16,141, 104,23,29,31, 149,105,110,44, 45,115,57,120, 122,169,128,129", 11);
  const grid = new _srcLibStampLayout.GridStampLayout(new _srcGeomCore.Ray(w / 2, h / 2, 0), {
    stamp: lattice,
    permutationSequenceStatement: "SEEDS()",
    rows: 8,
    columns: 3,
    rowSpacing: 200,
    columnSpacing: 200
  });
  let pathSets = grid.children().map(x => {
    let path = x.path();
    let c = _srcGeomHelpers.GeomHelpers.boundingCircleFromPaths(path);
    if (c) {
      let scale = 60 / c.radius;
      return x.path(scale);
    }
    return path;
  });
  const border = new _geomShapes.Rectangle(new _srcGeomCore.Ray(w / 2, h / 2), w, h);
  border.style.fillAlpha = 0;
  _srcLibDraw.drawShape(ctx, border);
  pathSets.forEach(paths => {
    let shapes = _srcLibClipperHelpers.ClipperHelpers.offsetPathsToShape(paths, 0.001, 4);
    shapes.forEach(shape => {
      _srcLibDraw.drawShape(ctx, shape, 0);
      console.log("shape perimeter", _srcGeomUtil.GeomUtils.measureShapePerimeter(shape));
    });
    paths.forEach(path => {});
  });
};
document.onkeydown = function (e) {
  // if enter
  if (e.keyCode === 13) {
    // reset Sequences
    _srcLibSequence.Sequence.resetAll();
    // export the canvas as SVG
    const ctx2 = new _canvas2svg(canvas.width / ratio, canvas.height / ratio);
    // draw the boundary
    ctx2.backgroundColor = "#000";
    // draw the shapes
    draw(ctx2);
    // download the SVG
    const svg = ctx2.getSerializedSvg(false).split("#FFFFFF").join("#000000");
    const svgNoBackground = svg.replace(/\<rect.*?\>/g, "");
    const blob = new Blob([svgNoBackground], {
      type: "image/svg+xml"
    });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `stamp-${new Date().toISOString()}.svg`;
    link.click();
  }
};
async function main() {
  await _srcLibClipperHelpers.ClipperHelpers.init();
  const now = new Date().getTime();
  draw(ctx);
  console.log(`${new Date().getTime() - now}ms`);
}
main();
